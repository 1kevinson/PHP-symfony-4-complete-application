{% extends "base.html.twig" %}

{% block body %}
    {{  include('micro-post/raw-post.html.twig', {'post' : post })  }}

    {% set isLiked = post.likedBy.contains(app.user) %}

    <div class="pt-2"  id="like-badge">
        <button style="display: {% if not isLiked %} block {% else %} none {% endif %} " class="btn btn-outline-secondary btn-sm" id="like">
            Like
            <span class="badge badge-light" id="likes-like">{{ post.likedBy.count }}</span>
        </button>
        <button style="display: {% if isLiked %} block {% else %} none {% endif %} " class="btn btn-outline-secondary btn-sm" id="unlike">
            Unlike
            <span class="badge badge-light" id="likes-unlike">{{ post.likedBy.count }}</span>
        </button>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}

     <script>
         let likeButton = document.getElementById('like');
         let unlikeButton = document.getElementById('unlike');

         addOnClick(likeButton,unlikeButton,document.getElementById('likes-unlike'),'{{ path('likes_like',{'id' : post.id }) }}');
         addOnClick(unlikeButton,likeButton,document.getElementById('likes-like'),'{{ path('likes_unlike',{'id' : post.id }) }}');
         

         /* LOGIC REGION */
         function switchButton(button, oppositeButton) {
            button.disabled = false;
            button.style.display = 'none';
            oppositeButton.style.display = 'block'
         }

         function addOnClick(button, oppositeButton, likeCount, path) {
             button.addEventListener('click', function (event) {
                 //Check User is connected
                 {% if not app.user %}
                    return window.location.replace('{{ path('user_register') }}');
                 {% endif %}

                button.disabled = true;

                fetch(path,{'credentials': 'include'}).then(function (response) {
                    response.json().then(function (json) {
                        likeCount.innerText = json.count;
                        switchButton(button, oppositeButton)
                    })
                }).catch(function () {
                        switchButton(button,oppositeButton)
                });
                   event.preventDefault();
             });
         }

     </script>
{% endblock %}

{#

 L'API Fetch fournit une interface JavaScript pour l'accès et la manipulation des parties de la pipeline HTTP, comme les requêtes et les réponses.
 Cela fournit aussi une méthode globale fetch() qui procure un moyen facile et logique de récupérer des ressources à travers le réseau de manière asynchrone.


 Pour gerer les likes, unlikes
 Il faut creer un controller de likes qui renvoit en JSON le nombre de like et le traiter de maniere asynchrone
 dans la page en javascript.

 fetch(path,{'credentials': 'include'}).then(function (response) --> IMPORTANT de spécifier les credentials car il permet au javascript de sauvegarder les cookies de l'utilisateur connecté

#}